#pragma kernel DrawAgent
#pragma kernel PostRender

struct Agent {
    float2 position;
    float2 direction;
};

int width;
int height;
float4 color;
float4 color2;
float4 color3;
bool showTrail;
bool colorAgent;
bool highlightGuideAgent;
bool whiteAgentPixel;

RWTexture2D<float4> AgentMap;
RWTexture2D<float4> TrailMap;
RWTexture2D<float4> RenderMap;

RWStructuredBuffer<Agent> agents;

float4 getPixelColor(float4 pixelVal) {
    float4 c = 0;
    if (pixelVal.x > 0) c += color;
    if (pixelVal.y > 0) c += color2;
    if (pixelVal.z > 0) c += color3;
    return c;
}

[numthreads(8,8,1)]
void DrawAgent (uint3 id : SV_DispatchThreadID)
{
    //finds the color to paint the agent with
    float4 finalColor = 0;
    float4 pixelVal = AgentMap[id.xy];
    
    if (pixelVal.x > 0 || pixelVal.y > 0 || pixelVal.z > 0) {
       if (colorAgent)  finalColor = getPixelColor(pixelVal);
       else if (whiteAgentPixel) finalColor = 1;
    } else if (showTrail) finalColor = getPixelColor(TrailMap[id.xy]) * length(TrailMap[id.xy]);

    RenderMap[id.xy] = finalColor;


    AgentMap[id.xy] = 0; // cleaning agent map is part of logic
}

[numthreads(8,8,1)]
void PostRender (uint3 id : SV_DispatchThreadID)
{
    //paint the guide agent red
    int2 p = agents[0].position;
    int x = id.x + p.x;
    int y = id.y + p.y;
    if (x >= 0 && x < width && y >= 0 && y < height){
        RenderMap[int2(x, y)] = float4(1,0,0,1);
    }
}

